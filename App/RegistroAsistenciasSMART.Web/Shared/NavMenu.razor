
@inject ILogger<NavMenu> _logger

@if (_isLoading)
{
	<p>Cargando...</p>
}
else
{
	<div class="dropdown-item usuario-movil" style="display:flex; flex-flow: row; justify-content: space-around !important">
		<div class="status-indicator-container">
			<img style="height:30px" src="https://i.ibb.co/6gTWzjY/Screenshot-1.png">
		</div>
		<span style="color:black" class="d-lg-inline-block mx-lg-2">@session.UserName</span>
	</div>
	<div class="dropdown-divider usuario-movil"></div>

	@* PERFILAMIENTO *@
	<ModuleAuthorizationView id_modulo="1">
		<Authorize>
			<NavLink class="dropdown-item" href="/Perfilamiento">Perfilamiento</NavLink>
		</Authorize>
		<NotAuthorize>

		</NotAuthorize>
	</ModuleAuthorizationView>
	@* GESTIÓN ASISTENCIAS *@
	<ModuleAuthorizationView id_modulo="5">
		<Authorize>
			<NavLink class="dropdown-item" href="/GestionAsistencias">Gestión Asistencias</NavLink>
		</Authorize>
		<NotAuthorize>

		</NotAuthorize>
	</ModuleAuthorizationView>
	

	<button type="button" @onclick="eventoCerrarSession" style="color:red;font-weight:600;display:block" class="dropdown-item">
		Cerrar sesión
	</button>
}

@code {
	[Parameter]
	public EventCallback eventoCerrarSession { get; set; }

	[CascadingParameter]
	protected UserSession? session { get; set; }

	private bool _isLoading = true;


	protected async override Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			_isLoading = true;
			StateHasChanged();



			_isLoading = false;
			StateHasChanged();
		}
	}

}
