@using RegistroAsistenciasSMART.Model.Models.Configuracion.Perfilamiento
@using RegistroAsistenciasSMART.Services.Interfaces.Configuracion.Perfilamiento
@using Microsoft.AspNetCore.Components.Server.Circuits;

@inherits LayoutComponentBase

@inject IUserService _userService

@inject ILogger<MainLayout> _logger

<!-- Global stylesheets -->
<link href="assetsMainSite/fonts/inter/inter.css" rel="stylesheet" type="text/css">
<link href="assetsMainSite/icons/phosphor/styles.min.css" rel="stylesheet" type="text/css">
<link href="assetsMainSite/css/ltr/all.min.css" id="stylesheet" rel="stylesheet" type="text/css">
<link href="assetsMainSite/css/site.css" id="stylesheet" rel="stylesheet" type="text/css">


<PageTitle>Registro Asistencias SMART</PageTitle>

<_LoadingSpinner></_LoadingSpinner>


@if (!_isLoading)
{
	<!-- Page header -->
	<div class="page-header page-header-dark text-white">
		<div class="page-header-content container-boxed d-lg-flex">
			<div class="d-flex mb-3 mt-3">
				<div class="navbar-brand flex-1 flex-lg-0">
					<a href="/Home" class="d-inline-flex align-items-center">
						<img src="https://i.ibb.co/s9M9xyq/Smart-Logo-redes.png" style="height:90px" />
					</a>
				</div>
			</div>

			<div class="collapse d-lg-block my-lg-auto ms-lg-auto show" id="page_header">
				<div class="d-inline-flex align-items-center mb-2 mb-lg-0" id="menu-top">

					<div class="dropdown ms-2">
						<ul class="nav order-3 ms-lg-2">

							<li class="nav-item nav-item-dropdown-lg dropdown ms-lg-2 usuario-pc">
								<a href="#" class="navbar-nav-link align-items-center rounded-pill p-1" data-bs-toggle="dropdown">
									<div class="status-indicator-container">
										<img style="height:30px" src="https://i.ibb.co/6gTWzjY/Screenshot-1.png">
									</div>
									<span style="color:black" class="d-none d-lg-inline-block mx-lg-2">@session.UserName</span>
								</a>
							</li>

							<li style="display:flex; align-items: center" class="nav-item nav-item-dropdown-lg dropdown ms-lg-2">
								<a href="#" id="menu-drop" target="_top" style="color:black; background-color:white; border-color:white" class="btn btn-light btn-icon w-32px h-32px rounded-pill" data-bs-toggle="dropdown" data-color-theme="dark">
									<i class="ph-list"></i>
								</a>
								<div class="dropdown-menu dropdown-menu-end">
									<CascadingValue Value="session">
										<NavMenu eventoCerrarSession="CerrarSesion"></NavMenu>
									</CascadingValue>

								</div>
							</li>
						</ul>
					</div>
				</div>
			</div>
		</div>
	</div>
	<!-- /page header -->
	<!-- Page content -->
	<div class="page-content">

		<!-- Main content -->
		<div class="content-wrapper">

			<!-- Content area -->
			<div class="content">

				<CascadingValue Value="@session">
					<PageAuthorizationView>
						<Authorize>
							@Body
						</Authorize>
						<NotAuthorize>
							<_Page403></_Page403>
						</NotAuthorize>
					</PageAuthorizationView>
				</CascadingValue>
			</div>
			<!-- /content area -->

		</div>
		<!-- /main content -->

	</div>
	<!-- /page content -->
	<!-- Footer -->
	<div class="navbar navbar-sm navbar-footer border-top px-lg-0">
		<div class="container-fluid container-boxed">
			<span>&copy; @DateTime.Now.Year SMART</span>
		</div>
	</div>
	<!-- /footer -->
}

@code {

	private bool _isLoading = true;
	private string usuario = "";


	private UserSession session = new UserSession();


	protected override async Task OnAfterRenderAsync(bool firsRender)
	{
		try
		{
			if (firsRender)
			{
				if (!await ValidarAutenticacionUsuario())
				{
					return;
				}

				_isLoading = false;
				StateHasChanged();

				await _jsRuntime.InvokeVoidAsync("loadScript", "../assetsMainSite/js/bootstrap/bootstrap.bundle.min.js");
				await _jsRuntime.InvokeVoidAsync("loadScript", "../assetsMainSite/js/vendor/ui/fab.min.js");
				await _jsRuntime.InvokeVoidAsync("loadScript", "../assetsMainSite/js/vendor/visualization/d3/d3.min.js");
				await _jsRuntime.InvokeVoidAsync("loadScript", "../assetsMainSite/js/vendor/visualization/d3/d3_tooltip.js");
				await _jsRuntime.InvokeVoidAsync("loadScript", "../assetsMainSite/js/app.js");

				//Loader
				await _jsRuntime.InvokeVoidAsync("agregarClase", ".loaderOverlay", "inactive");
			}
		}
		catch (Exception exe)
		{
			_logger.LogError(exe, $"Error al cargar Site Template");
		}
	}

	private async Task<bool> ValidarAutenticacionUsuario()
	{
		session = await _authenticationService.getActualSession();

		if (session is null)
		{
			_navigationManager.NavigateTo("/", forceLoad: true);
			return false;
		}

		var ipAddress = await _jsRuntime.GetIpAddress();

		//La sesión se vence si han pasado más de 2 días desde último login
		if ((DateTime.Now - session.last_login.GetValueOrDefault()).TotalDays > 2)
		{
			await _userService.registrarAuditoriaCierreSesion(session.id_auditoria_login, session.UserName, ipAddress, $"La sesión se vence ya que han han pasado más de 2 días desde último login {session.last_login.GetValueOrDefault()}");
			await _authenticationService.LimpiarSesion();
			_navigationManager.NavigateTo("/", forceLoad: true);
			return false;
		}

		Usuario tempUser = await _userService.getUsuarioByUser(session.UserName);

		//Usuario inactivo
		if (tempUser.estado != 1)
		{
			await _userService.registrarAuditoriaCierreSesion(session.id_auditoria_login, session.UserName, ipAddress, $"La sesión se vence ya se ha inactivado el usuario");
			await _authenticationService.LimpiarSesion();
			_navigationManager.NavigateTo("/", forceLoad: true);
			return false;
		}

		if (!session.RememberMe)
		{
			//Si no tiene activado el rememberme, el tiempo de sesión es de 30min
			if ((DateTime.Now - session.last_login.GetValueOrDefault()).TotalMinutes > 30)
			{
				await _userService.registrarAuditoriaCierreSesion(session.id_auditoria_login, session.UserName, ipAddress, $"La sesión se vence ya que han han pasado más de 30 minutos y no se tenía activiado el RememberMe desde último login {session.last_login.GetValueOrDefault()}");
				await _authenticationService.LimpiarSesion();
				_navigationManager.NavigateTo("/", forceLoad: true);
				return false;
			}
		}


		session.Ip = ipAddress;
		session.last_login = DateTime.Now;
		session.Role = tempUser.id_rol.ToString();

		await _authenticationService.updateActualSession(session);
		_authenticationService.conectarCircuito(session);

		usuario = session.UserName;

		await _jsRuntime.InitializeInactivityTimer(DotNetObjectReference.Create(this));

		return true;
	}


	private async Task CerrarSesion()
	{
		try
		{
			var ipAddress = await _jsRuntime.GetIpAddress();
			await _userService.registrarAuditoriaCierreSesion(session.id_auditoria_login, session.UserName, ipAddress, $"Cierre de sesión manual");
			await _authenticationService.LimpiarSesion();
			_navigationManager.NavigateTo("/", forceLoad: true);
		}
		catch (Exception exe)
		{
			_logger.LogError(exe, "Error al cerrar sesión");
		}
	}

	[JSInvokable]
	public async Task Logout()
	{
		UserSession session = await _authenticationService.getActualSession();

		if (session is null) return;

		var ipAddress = await _jsRuntime.GetIpAddress();
		await _userService.registrarAuditoriaCierreSesion(session.id_auditoria_login, session.UserName, ipAddress, $"Cierre de la sesión por inactividad");
		await _authenticationService.LimpiarSesion();

		_navigationManager.NavigateTo("/", forceLoad: true);
		await _jsRuntime.InvokeVoidAsync("warningToastr", "Tu sesión ha sido cerrada debido a inactividad");
	}

	[JSInvokable]
	public async Task AlertaLogout()
	{
		UserSession session = await _authenticationService.getActualSession();

		if (session is null) return;

		await _jsRuntime.InvokeVoidAsync("warningToastr", "Tu sesión caducará en 3 minutos por inactividad");
	}

	[JSInvokable]
	public async Task<string> GetActualUserName()
	{
		UserSession session = await _authenticationService.getActualSession();

		if (session is null) return "";

		return session.UserName;
	}
}








