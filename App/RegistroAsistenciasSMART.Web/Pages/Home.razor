@page "/"
@page "/Home"

@using AppDemoBlazor.Model.Models.CargueMasivo
@using RegistroAsistenciasSMART.Data.Repositories.Interfaces.Colaboradores
@using RegistroAsistenciasSMART.Model.Models
@using RegistroAsistenciasSMART.Services.Interfaces.Colaboradores

@inject IColaboradorService _colaboradorService
@inject ILogger<Home> _logger

@if (_isLoading)
{
	<_Loading></_Loading>
}
else
{
	<div class="row">
		<div class="card">
			<div class="card-header">
				<h6 class="mb-0">Filtros</h6>
			</div>

			<div class="card-body">
				<div class="col-md-12">
					<input class="form-control" type="text" @bind="filtro" placeholder="Filtra por nombres, apellidos, correo..." @bind:event="onchange" @bind:after="Filtrar" />
				</div>
			</div>
		</div>

	</div>

	<div class="row">
		<div class="card">
			<div class="card-header">
				<h6 class="mb-0">Colaboradores</h6>
			</div>

			<div class="card-body">
                <RadzenButton ButtonStyle="ButtonStyle.Success" Icon="add_circle_outline" class="mt-2 mb-4" Text="Agregar nuevo colaborador" Click="@InsertRow" Disabled=@(colaboradorToInsert != null || colaboradorToUpdate != null) />
                <RadzenButton ButtonStyle="ButtonStyle.Info" Icon="add_circle_outline" class="mt-2 mb-4" Text="Cargar colaboradores masivamente" Click=@(() => _modalCargueMasivo.abrirModal()) />
                <RadzenDataGridApp AllowVirtualization="true" @ref="colaboradoresGrid" LogicalFilterOperator="LogicalFilterOperator.Or" AllowPaging="true"
                                   AllowFiltering="true" PageSize="10" AllowColumnResize="true" AllowSorting="true" Data="@colaboradores_temp" TItem="Colaborador"
                                   IsLoading="@_isLoading"
                                   EditMode="DataGridEditMode.Single"
                                   RowUpdate="@OnUpdateRow"
                                   RowCreate="@OnCreateRow"
                                   Sort="@Reset"
                                   Page="@Reset"
                                   Filter="@Reset"
                                   ColumnWidth="200px">
                    <Columns>
                        <RadzenDataGridColumn TItem="Colaborador" Frozen="true" Context="Colaborador" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="156px">
                            <Template Context="colaborador">
                                <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@(args => EditRow(colaborador))" @onclick:stopPropagation="true">
                                </RadzenButton>
                                <RadzenButton ButtonStyle="ButtonStyle.Primary" Icon="delete" Class="m-1" Click=@(() => EliminarColaborador(colaborador)) Text="" />
                            </Template>
                            <EditTemplate Context="colaborador">
                                <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@((args) => SaveRow(colaborador))">
                                </RadzenButton>
                                <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@((args) => CancelEdit(colaborador))">
                                </RadzenButton>
                                <RadzenButton ButtonStyle="ButtonStyle.Primary" Icon="delete" Class="m-1" Click=@(() => EliminarColaborador(colaborador)) Text="" />
                            </EditTemplate>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="Colaborador" Property="fecha_adicion" Title="Fecha de Adición">
                            <EditTemplate Context="colaborador">
                                <div style="text-align:center">
                                    @("-")
                                </div>
                            </EditTemplate>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="Colaborador" Frozen="true" Property="cedula" Title="Cédula">
                            <EditTemplate Context="colaborador">
                                @if (colaboradorToUpdate is null)
                                {
                                    <input type="text" class="form-control" @bind-value="colaborador.cedula" />
                                }
                                else
                                {
                                    @colaborador.cedula
                                }
                            </EditTemplate>
                            <Template Context="colaborador">
                                @colaborador.cedula
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="Colaborador" Property="nombres" Title="Nombres">
                            <EditTemplate Context="colaborador">
                                <input type="text" class="form-control" @bind-value="colaborador.nombres" />
                            </EditTemplate>
                            <Template Context="colaborador">
                                @colaborador.nombres
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="Colaborador" Property="cargo" Title="Cargo">
                            <EditTemplate Context="colaborador">
                                <input type="text" class="form-control" @bind-value="colaborador.cargo" />
                            </EditTemplate>
                            <Template Context="colaborador">
                                @colaborador.cargo
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="Colaborador" Property="area" Title="Área">
                            <EditTemplate Context="colaborador">
                                <input type="text" class="form-control" @bind-value="colaborador.area" />
                            </EditTemplate>
                            <Template Context="colaborador">
                                @colaborador.area
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="Colaborador" Property="jefe_inmediato" Title="Jefe Inmediato">
                            <EditTemplate Context="colaborador">
                                <RadzenAutoComplete @bind-Value=@colaborador.jefe_inmediato FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" Data=@jefes>
                                </RadzenAutoComplete>
                            </EditTemplate>
                            <Template Context="colaborador">
                                @colaborador.jefe_inmediato
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="Colaborador" Property="sede" Title="Sede">
                            <EditTemplate Context="colaborador">
                                <RadzenAutoComplete @bind-Value=@colaborador.sede FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" Data=@sedes>
                                </RadzenAutoComplete>
                            </EditTemplate>
                            <Template Context="colaborador">
                                @colaborador.sede
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="Colaborador" Property="correo" Title="Correo">
                            <EditTemplate Context="colaborador">
                                <input type="email" class="form-control" @bind-value="colaborador.correo" />
                            </EditTemplate>
                            <Template Context="colaborador">
                                @colaborador.correo
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="Colaborador" Property="turno" Title="Turno">
                            <EditTemplate Context="colaborador">
                                <input type="text" class="form-control" @bind-value="colaborador.turno" />
                            </EditTemplate>
                            <Template Context="colaborador">
                                @colaborador.turno
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="Colaborador" Property="estado" Title="Estado">
                            <EditTemplate Context="colaborador">
                                <input type="text" class="form-control" @bind-value="colaborador.estado" />
                            </EditTemplate>
                            <Template Context="colaborador">
                                @colaborador.estado
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="Colaborador" Property="usuario_adiciono" Title="Usuario que adicionó">
                            <EditTemplate Context="colaborador">
                                @colaborador.usuario_adiciono
                            </EditTemplate>
                            <Template Context="colaborador">
                                @colaborador.usuario_adiciono
                            </Template>
                        </RadzenDataGridColumn>
                    </Columns>
                </RadzenDataGridApp>
			</div>
		</div>

	</div>

    <!-- Modal cargue masivo progress-->
    <_ModalComponent @ref="_modalCargueMasivoProgress"
                     _isLoading=@false
                     titulo="Cargue Masivo"
                     eventoAceptar=@(() => _modalCargueMasivoProgress.cerrarModal())
                     width="1000">
        <CuerpoModal>
            <div class="row">
                <div class="col-xl-3 col-sm-6">
                    <div class="card mini-stat bg-primary">
                        <div class="card-body mini-stat-img">
                            <div class="mini-stat-icon">
                                <i class="mdi mdi-cube-outline float-end"></i>
                            </div>
                            <div class="text-white">
                                <h6 class="text-uppercase mb-3 font-size-16 text-white">TOTAL REGISTROS</h6>
                                <h2 class="mb-4 text-white">@datos_cargue_masivo.total_registros</h2>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-xl-3 col-sm-6">
                    <div class="card mini-stat bg-primary">
                        <div class="card-body mini-stat-img">
                            <div class="mini-stat-icon">
                                <i class="mdi mdi-buffer float-end"></i>
                            </div>
                            <div class="text-white">
                                <h6 class="text-uppercase mb-3 font-size-16 text-white">REGISTROS CARGADOS</h6>
                                <h2 class="mb-4 text-white">@datos_cargue_masivo.total_registros_procesados</h2>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-xl-3 col-sm-6">
                    <div class="card mini-stat bg-primary">
                        <div class="card-body mini-stat-img">
                            <div class="mini-stat-icon">
                                <i class="mdi mdi-tag-text-outline float-end"></i>
                            </div>
                            <div class="text-white">
                                <h6 class="text-uppercase mb-3 font-size-16 text-white">REGISTROS FALTANTES</h6>
                                <h2 class="mb-4 text-white">@datos_cargue_masivo.total_registros_no_procesados</h2>

                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-xl-3 col-sm-6">
                    <div class="card mini-stat bg-primary">
                        <div class="card-body mini-stat-img">
                            <div class="mini-stat-icon">
                                <i class="mdi mdi-briefcase-check float-end"></i>
                            </div>
                            <div class="text-white">
                                <h6 class="text-uppercase mb-3 font-size-16 text-white">ESTADO</h6>
                                <h2 class="mb-4 text-white">@datos_cargue_masivo.estado</h2>

                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </CuerpoModal>
    </_ModalComponent>

    <!-- Modal cargue masivo-->
    <_ModalComponent @ref="_modalCargueMasivo"
                     _isLoading=@false
                     titulo="Cargue Masivo"
                     eventoAceptar=@CargueMasivoColaboradores
                     width="700">
        <CuerpoModal>
            <div class="row">
                <div class="col-md-12">
                    <div class="form-group">
                        <InputFile id="fuFile" OnChange="OnInputFileChange" accept=".xlsx" />
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="form-group">
                        <a href="Formatos/PlantillaColaboradores.xlsx" download class="btn btn-primary">Descargar Plantilla</a>
                    </div>
                </div>
            </div>
        </CuerpoModal>
    </_ModalComponent>
}


@code {
    private string filtro = "";

    private bool _isLoading = true;

    IEnumerable<Colaborador> colaboradores;
    IEnumerable<Colaborador> colaboradores_temp;

    RadzenDataGrid<Colaborador> colaboradoresGrid;

    Colaborador colaboradorToInsert;
    Colaborador colaboradorToUpdate;

    private IEnumerable<string> jefes = new List<string>();
    private IEnumerable<string> sedes = new List<string>();

    IReadOnlyList<IBrowserFile> selectedFiles;

    private _ModalComponent _modalCargueMasivo;
    private _ModalComponent _modalCargueMasivoProgress;

    //Progress
    private CargueMasivoDTO datos_cargue_masivo = new CargueMasivoDTO();

    private void OnInputFileChange(InputFileChangeEventArgs e)
    {
        selectedFiles = e.GetMultipleFiles();
        StateHasChanged();
    }

    private async Task CargueMasivoColaboradores()
    {
        if (selectedFiles == null)
        {
            await _jsRuntime.SweetAlertUsual("Error", "Debe seleccionar un archivo", TipoMensajeSweetAlert.error);
            return;
        }

        await _jsRuntime.SweetAlertLoading("Procesando", "Procesando solicitud");

        IEnumerable<Archivo> archivos = await FileHelper.getTempFiles(selectedFiles);

        Archivo archivo_cargue = archivos.FirstOrDefault();

        Progress<CargueMasivoDTO> progress = new Progress<CargueMasivoDTO>();
        progress.ProgressChanged += ReportProgress;

        ResponseDTO respuesta = await _colaboradorService.cargueMasivoColaboradores(archivo_cargue, progress);

        if (respuesta.estado.Equals("ERROR"))
        {
            await _jsRuntime.SweetAlertUsual("Error", respuesta.descripcion, TipoMensajeSweetAlert.error);
            return;
        }

        await _jsRuntime.InvokeVoidAsync("Swal.close");

        await _modalCargueMasivo.cerrarModal();

        await _modalCargueMasivoProgress.abrirModal();

    }

    private async void ReportProgress(object sender, CargueMasivoDTO e)
    {
        this.datos_cargue_masivo = e;
        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        try
        {
            if (firstRender)
            {
                await LoadData();
            }
        }
        catch (Exception exe)
        {
            _logger.LogError(exe, "Error al consultar colaboradores");
            await _jsRuntime.SweetAlertUsual("Error", "Error al consultar colaboradores", TipoMensajeSweetAlert.error);
        }
    }

    private async Task LoadData()
    {
        _isLoading = true;
        StateHasChanged();

        colaboradores = await _colaboradorService.consultarColaboradores();
        colaboradores_temp = colaboradores;
        jefes = colaboradores.DistinctBy(c => c.jefe_inmediato).Select(c => c.jefe_inmediato);
        sedes = colaboradores.DistinctBy(c => c.sede).Select(c => c.sede);

        _isLoading = false;
        StateHasChanged();
    }

    private async Task Filtrar()
    {
        try
        {
            if (string.IsNullOrEmpty(filtro))
            {
                colaboradores_temp = colaboradores;
                return;
            }

            //Firmas de documentos
            colaboradores_temp = colaboradores.Where
            (
                c =>

                c.cedula.ToLower().Contains(filtro.ToLower()) ||
                c.nombres.ToLower().Contains(filtro.ToLower()) ||
                c.cargo.ToLower().Contains(filtro.ToLower()) ||
                c.area.ToLower().Contains(filtro.ToLower()) ||
                c.jefe_inmediato.ToLower().Contains(filtro.ToLower()) ||
                c.sede.ToLower().Contains(filtro.ToLower()) ||
                c.correo.ToLower().Contains(filtro.ToLower()) ||
                c.turno.ToLower().Contains(filtro.ToLower())

            );


            _isLoading = false;
            StateHasChanged();
        }
        catch (Exception exe)
        {
            _logger.LogError(exe, "Error al realizar filtro");
        }
    }

    private async Task EliminarColaborador(Colaborador colaborador)
    {
        try
        {
            if(await _jsRuntime.SweetAlertConfirm("Eliminar colaborador", "¿Está seguro de eliminar este colaboradorador?",TipoMensajeSweetAlert.question))
            {
                if(await _colaboradorService.eliminarColaborador(colaborador.cedula))
                {
                    await _jsRuntime.InvokeVoidAsync("successToastr", "Colaborador eliminado correctamente");
                }
                else
                {
                    await _jsRuntime.SweetAlertUsual("Error", "No fue posible eliminar este colaborador", TipoMensajeSweetAlert.error);
                }
            }
        }
        catch(Exception exe)
        {
            _logger.LogError(exe,"Error al eliminar colaborador");
            await _jsRuntime.SweetAlertUsual("Error", "Ocurrió un error al realizar esta operacion", TipoMensajeSweetAlert.error);
        }
    }

    void Reset()
    {
        colaboradorToInsert = null;
        colaboradorToUpdate = null;
    }


    async Task EditRow(Colaborador colaborador)
    {
        colaboradorToUpdate = colaborador;
        await colaboradoresGrid.EditRow(colaborador);
    }

    private async Task OnUpdateRow(Colaborador colaborador)
    {
        try
        {
            if (colaborador == colaboradorToInsert)
            {
                colaboradorToInsert = null;
            }

            colaboradorToUpdate = null;

            colaborador.usuario_adiciono = "Administrador";

            ResponseDTO respuesta = await _colaboradorService.actualizarInfoColaborador(colaborador);

            if (!respuesta.estado.Equals("OK"))
            {
                await _jsRuntime.SweetAlertUsual("Error", respuesta.descripcion, TipoMensajeSweetAlert.error);
                return;
            }

            await _jsRuntime.InvokeVoidAsync("successToastr", "Información guardada correctamente");
        }
        catch (Exception exe)
        {
            CancelEdit(colaborador);
            _logger.LogError(exe, "Error al actualizar colaborador");
            await _jsRuntime.SweetAlertUsual("Error", "Error al realizar esta operación", TipoMensajeSweetAlert.error);
        }
    }

    async Task SaveRow(Colaborador colaborador)
    {
        colaborador.usuario_adiciono = "Administrador";

        ResponseDTO respuesta = _colaboradorService.validarColaborador(colaborador);

        if (respuesta.estado.Equals("ERROR"))
        {
            await _jsRuntime.SweetAlertUsual("Error", respuesta.descripcion, TipoMensajeSweetAlert.error);
            return;
        }

        await colaboradoresGrid.UpdateRow(colaborador);
    }

    void CancelEdit(Colaborador colaborador)
    {
        colaboradorToInsert = null;
        colaboradorToUpdate = null;

        colaboradoresGrid.CancelEditRow(colaborador);
    }

    async Task InsertRow()
    {
        colaboradorToInsert = new Colaborador();
        await colaboradoresGrid.InsertRow(colaboradorToInsert);
    }

    private async Task OnCreateRow(Colaborador colaborador)
    {
        try
        {
            if (colaborador == colaboradorToInsert)
            {
                colaboradorToInsert = null;
            }

            colaboradorToUpdate = null;

            colaborador.usuario_adiciono = "Administrador";

            ResponseDTO respuesta = await _colaboradorService.insertarInfoColaborador(colaborador);

            if (!respuesta.estado.Equals("OK"))
            {
                await _jsRuntime.SweetAlertUsual("Error", respuesta.descripcion, TipoMensajeSweetAlert.error);
                return;
            }

            List<Colaborador> colaboradores_temporal = colaboradores.ToList();
            colaboradores_temporal.Add(colaborador);
            colaboradores = colaboradores_temporal.ToList();

            colaboradores_temp = colaboradores;

            await _jsRuntime.InvokeVoidAsync("successToastr", "Información guardada correctamente");
        }
        catch (Exception exe)
        {
            CancelEdit(colaborador);
            _logger.LogError(exe, "Error al insertar colaborador");
            await _jsRuntime.SweetAlertUsual("Error", "Error al realizar esta operación", TipoMensajeSweetAlert.error);
        }
    }
}
