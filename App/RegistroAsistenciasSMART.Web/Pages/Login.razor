@layout LoginTemplate
@page "/"

@using RegistroAsistenciasSMART.Model.DTO
@using RegistroAsistenciasSMART.Model.DTO.Configuracion.Perfilamiento
@using RegistroAsistenciasSMART.Model.Models.Configuracion.Perfilamiento
@using RegistroAsistenciasSMART.Services.Interfaces.Configuracion.Perfilamiento
@using RegistroAsistenciasSMART.Web.Services
@using Microsoft.AspNetCore.Components.Server.Circuits;

@inject IUserService _userService
@inject ILogger<Login> _logger

<PageTitle>Login | SMART</PageTitle>

@if(!_isLoading){
    <div class="container-flex">
        <div class="row">
            <div class="col-md-5 col-main" >
                <section class="mb-4">
                    <div class="head" id="headSmart">
                        <img id="smart" src="/images/logo-smart-login.png" alt="Logo de Smart Academia">
                    </div>
                </section>

                <section class="mb-4">
                    <div id="titulo">
                        <h2 id="elTitulo">
                            Bienvenid@@ 
                        </h2>
                    </div>
                </section>

                <section class="mb-4">
                    <div id="titulo">
                        <h2 id="elTitulo2">
                            Para ingresar diligencia
                            los siguientes datos
                        </h2>
                    </div>
                </section>

                <section class="mb-4">
                    <div id="formulario">

                        <EditForm class="login100-form validate-form" Model="usuario" OnSubmit="Ingresar">

                            <div class="mb-4">
                                <label for="correo" class="form-label">Correo</label>
                                <input id="cedula" @bind-value="usuario.usuario" type="email" class="form-control" placeholder="Ingresa tu correo institucional">
                            </div>
                            <div class="mb-4">
                                <RadzenCheckBox @bind-Value=@rememberMe Name="chkRememberMe" TValue="bool" />
                                <RadzenLabel Text="Recuerda mis datos" Component="chkRememberMe" Style="margin-left: 8px; vertical-align: middle;" />
                            </div>

                            <button id="boton" type="submit"> Ingresar </button>

                        </EditForm>

                    </div>
                </section>


                <section>
                    <div>
                        <h2 class="version">© TDx Smart Academia de Idiomas / @DateTime.Now.Year</h2>
                    </div>
                </section>
            </div>
            <div class="col-md-7 col-imagen" style="text-align: center;">
                <div class="Imagen">
                    <img id="Imagenlogin" style="height:100%; width:80%;" src="/images/img-login.png" alt="Imagenlogin">
                </div>
            </div>
        </div>
    </div>
    


}
else{
    <_Loading></_Loading>
}


@code {
    bool _isLoading = true;
    bool rememberMe = false;

    private UserDTO usuario = new UserDTO();

    protected override async Task OnAfterRenderAsync(bool firsRender)
    {
        try
        {
            if (firsRender)
            {
                await ValidarRememberMe();

                _isLoading = false;
                StateHasChanged();
            }
        }
        catch (Exception exe)
        {
            _logger.LogError(exe, "Error al cargar datos de login");
            await _jsRuntime.SweetAlertUsual("Error", "Error interno del servidor", TipoMensajeSweetAlert.error);
        }
    }

    private async Task<bool> ValidarRememberMe()
    {
        UserSession userSession = await _authenticationService.getActualSession();

        if (userSession is null) return false;

        var ipAddress = await _jsRuntime.GetIpAddress();

        //La sesión se vence si han pasado más de 2 días desde último login
        if ((DateTime.Now - userSession.last_login.GetValueOrDefault()).TotalDays > 2)
        {
            await _userService.registrarAuditoriaCierreSesion(userSession.id_auditoria_login, userSession.UserName, ipAddress, $"La sesión se vence ya que han han pasado más de 2 días desde último login {userSession.last_login.GetValueOrDefault()}");
            await _authenticationService.LimpiarSesion();
            return false;
        }

        Usuario tempUser = await _userService.getUsuarioByUser(userSession.UserName);

        //Usuario inactivo
        if (tempUser.estado != 1)
        {
            await _userService.registrarAuditoriaCierreSesion(userSession.id_auditoria_login, userSession.UserName, ipAddress, $"La sesión se vence ya se ha inactivado el usuario");
            await _authenticationService.LimpiarSesion();
            return false;
        }

        bool rememberMe = userSession.RememberMe;

        if (rememberMe)
        {
            userSession.Ip = ipAddress;
            userSession.last_login = DateTime.Now;

            await _authenticationService.updateActualSession(userSession);
            _authenticationService.conectarCircuito(userSession);

            await _userService.procesarIngreso(userSession.UserName, ipAddress, "Exitoso, ingreso por RememberMe entrando a pantalla de login");

            _navigationManager.NavigateTo("/Home", true);

            return true;
        }
        else
        {
            await _userService.registrarAuditoriaCierreSesion(userSession.id_auditoria_login, userSession.UserName, ipAddress, $"La sesión se vence ya el usuario ha vuelto a la página de login");
            await _authenticationService.LimpiarSesion();
            return false;
        }
    }

    private async void Ingresar()
    {
        try
        {
            await _jsRuntime.SweetAlertLoading("Procesando", "Procesando solicitud");

            if (string.IsNullOrEmpty(usuario.usuario))
            {
                await _jsRuntime.SweetAlertUsual("Error", "Debes diligenciar el usuario", TipoMensajeSweetAlert.error);
                return;
            }

            var remoteIpAddress = await _jsRuntime.GetIpAddress();

            ResponseDTO respuesta = await _userService.loginUsuario(usuario, remoteIpAddress);

            if (respuesta.estado.Equals("OK"))
            {
                await _jsRuntime.InvokeVoidAsync("Swal.close");

                Dictionary<string, string> parametros = new Dictionary<string, string>()
                {
                    {"usuario",usuario.usuario},
                    {"rememberme", rememberMe.ToString()},
                    {"idauditorialogin",respuesta.descripcion}
                };

                string parametro_encriptado = _encryptService.encriptarParametros(parametros);

                _navigationManager.NavigateTo($"/OtpLogin/{parametro_encriptado}", forceLoad: true);
            }
            else
            {
                await _jsRuntime.SweetAlertUsual("Error", respuesta.descripcion, TipoMensajeSweetAlert.error);
                return;
            }
        }
        catch (Exception exe)
        {
            _logger.LogError(exe, $"Error al realizar login para usuario {usuario.usuario}");
            await _jsRuntime.InvokeVoidAsync("Swal.close");
            await _jsRuntime.SweetAlertUsual("Error", "Error interno del servidor", TipoMensajeSweetAlert.error);
        }
    }
}