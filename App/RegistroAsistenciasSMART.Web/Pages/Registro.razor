@layout RegistroLayout

@page "/Registro/{sede}"
@using Newtonsoft.Json
@using RegistroAsistenciasSMART.Model.DTO
@using RegistroAsistenciasSMART.Model.Models.Colaboradores
@using RegistroAsistenciasSMART.Services.Interfaces.Colaboradores
@using RegistroAsistenciasSMART.Services.Interfaces.Configuracion.Perfilamiento

@inject IColaboradorService _colaboradorService
@inject IUserService _userService
@inject ILogger<Registro> _logger



@if (_isLoading)
{
    <_Loading></_Loading>
}
else
{
    @if (_registroExitoso)
    {
        <RegistroExitoso nombre=@nombre_registro_exitoso></RegistroExitoso>
    }
    else
    {
        <div class="website">
            <section>
                <div class="head" id="headSmart">
                    <img id="smart" src="https://i.ibb.co/2cG4fmm/Group-398.png" alt="Logo de Smart Academia">
                </div>
            </section>

            <section>
                <div id="titulo">
                    <h2 id="elTitulo">Bienvenid@@</h2>
                </div>
            </section>

            <section>
                <div id="titulo">
                    <h2 id="elTitulo2">
                        Registra tu asistencia diligenciando
                        los siguientes datos
                    </h2>
                </div>
            </section>

            <section>
                <div class="container" id="formulario">

                    <div id="formularioRegistro" name="formularioRegistro" class="needs-validation">
                        <div class="mb-3">
                            <label for="cedula" class="form-label">Documento</label>
                            <input type="text" @bind-value="registro.cedula" name="cedula" id="cedula" class="form-control" placeholder="Ingresa tu número de documento">
                        </div>

                        <div class="row">
                            <div class="mb-3">
                                <label for="reporta" class="form-label"> ¿Qué reportas? </label>
                                <select @bind-value="registro.reporta" @bind-value:event="onchange" class="form-select" id="reporta" name="reporta">
                                    <option value="">[Seleccionar]</option>
                                    <option value="Entrada">Entrada</option>
                                    <option value="Salida">Salida</option>
                                    <option value="Traslado Salida">Traslado Salida</option>
                                    <option value="Traslado Entrada">Traslado Entrada</option>
                                </select>
                            </div>

                            <div class="col">
                                <div class="mb-3">
                                    <label for="sede" class="form-label"> ¿En qué sede? </label>
                                    <input type="text" @bind-value="registro.sede" id="sede" class="form-control" name="sede" readonly="readonly">
                                </div>
                            </div>
                        </div>

                        <div id="boton" class="mb-4 mt-4">
                            <button id="boton" type="button" @onclick="ProcesarRegistro"> Enviar registro </button>
                        </div>
                    </div>

                </div>
            </section>
        </div>
    }
}



@code {
    [Parameter]
    public string sede { get; set; }

    private bool _registroExitoso = false;
    private string nombre_registro_exitoso = "";
    private bool _isLoading = true;

    private UbicacionDTO ubicacion = new UbicacionDTO();

    private RegistroAsistencia registro = new RegistroAsistencia();

    private bool ip_no_valida = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        try
        {
            if (firstRender)
            {
                await _jsRuntime.InvokeVoidAsync("replaceURL", "Registro");

                if (string.IsNullOrEmpty(sede))
                {
                    await _jsRuntime.SweetAlertConfirmSuccess("Error", "URL no válida", TipoMensajeSweetAlert.error);
                    _navigationManager.NavigateTo("https://google.com");
                    return;
                }

                string ip_address = await _jsRuntime.GetIpAddress();

                IEnumerable<IpInfo> ips = _userService.consultarIpsAutorizados();

                if (!ips.Any(ip => ip.ip_address.Equals(ip_address)))
                {
                    _navigationManager.NavigateTo("/NoAutorizado",true);
                    return;
                }

                registro.sede = this.sede;

                _isLoading = false;
                StateHasChanged();
            }
        }
        catch(Exception exe)
        {
            _logger.LogError(exe, "Error al cargar/consultar datos para registro de asistencia");
            await _jsRuntime.SweetAlertUsual("Error", "Error interno del servidor", TipoMensajeSweetAlert.error);
        }
    }

    public class UbicacionDTO
    {
        public bool permitida;
        public string latitud;
        public string longitud;
    }

    private async Task procesarUbicacion()
    {
        //Ubicación
        string json = await _jsRuntime.InvokeAsync<string>("getPosition");

        IEnumerable<UbicacionDTO> ubicacion_json = JsonConvert.DeserializeObject<IEnumerable<UbicacionDTO>>(json);

        this.ubicacion = ubicacion_json.FirstOrDefault();
    }

    private async Task ProcesarRegistro()
    {
        try{
            await _jsRuntime.SweetAlertLoading("Procesando", "Procesando solicitud");

            await procesarUbicacion();

            if (ubicacion is null)
            {
                await _jsRuntime.SweetAlertConfirmSuccess("Error", "Debes conceder permisos de ubicación para poder realizar el registro", TipoMensajeSweetAlert.error);
                return;
            }

            if (!ubicacion.permitida)
            {
                await _jsRuntime.SweetAlertConfirmSuccess("Error", "Debes conceder permisos de ubicación para poder realizar el registro", TipoMensajeSweetAlert.error);
                return;
            }

            //Validación de sede
            if (!registro.sede.Equals(this.sede))
            {
                await _jsRuntime.SweetAlertConfirmSuccess("Error", $"Sede {registro.sede} no válida", TipoMensajeSweetAlert.error);
                return;
            }

            //Dirección IP
            string ip_address = await _jsRuntime.GetIpAddress();

            registro.ip_address = ip_address;
            registro.latitud = ubicacion.latitud;
            registro.longitud = ubicacion.longitud;

            ResponseDTO respuesta = await _colaboradorService.insertarRegistroAsistencia(registro);

            if (respuesta.estado.Equals("OK"))
            {
                nombre_registro_exitoso = respuesta.descripcion;
                _registroExitoso = true;
                await _jsRuntime.SweetAlertClose();
                StateHasChanged();
                return;
            }
            else
            {
                await _jsRuntime.SweetAlertUsual("Error", respuesta.descripcion, TipoMensajeSweetAlert.error);
            }
        }
        catch(Exception exe)
        {
            _logger.LogError(exe, "Error al procesar registro");
            await _jsRuntime.SweetAlertUsual("Error", "Error interno del servidor", TipoMensajeSweetAlert.error);
        }
    }
}
